// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array chars;
    field int currentLen, maxLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let chars = Array.new(maxLength);
        let currentLen = 0;
        let maxLen = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do chars.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return currentLen;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (currentLen < maxLen) {
            let chars[currentLen] = c;
            let currentLen = currentLen + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (currentLen > 0) {
            let currentLen = currentLen - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int index, intVal;
        var boolean pos;
        let intVal = 0;

        if ((currentLen > 0) & (chars[0] = 45)) { // check minus sign
            let pos = false;
            let index = 1;
        } else {
            let pos = true;
            let index = 0;
        }

        while ((index < currentLen) & String.isDigit(chars[index])) {
            let intVal = (intVal * 10) + chars[index] - 48;
            let index = index + 1;
        }

        if (pos) {
            return intVal;
        } else {
            return -intVal;
        }

    }

    function boolean isDigit(char c) {
        return ~(c < 48) & ~(c > 57);
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let currentLen = 0; // reset

        if (val < 0) {
            let val = -val;
            do appendChar(45);
        }

        do setPositiveInt(val);
        return;
    }

    method void setPositiveInt(int val) {
        var int nextVal;

        if (val < 10) {
            do appendChar(val + 48);
        } else {
            let nextVal = val / 10;
            do setPositiveInt(nextVal);
            do appendChar((val - (nextVal * 10)) + 48);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}